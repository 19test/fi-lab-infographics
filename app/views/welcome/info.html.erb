  <section class="media-1"><h3 class="media-heading">
      FIWARE Lab Nodes
    </h3>
    <span>
      FIWARE Lab is a working instance of FIWARE available for experimentation. FIWARE Lab is hosted on multiple nodes across Europe. 
    </span>
    <p>
      This page provides a real time infographics of the capacities of FIWARE Lab nodes.
    </p>
    <%= render :partial => "topbar" %>
  </section>

<div id="error" style="display: none; text-align: center;" class="layoutContainer">
  <span id="errorMessage"></span>
</div>

<div id="infographics" class="layoutContainer">
	<div class="row-fluid">
	    <div class="span12">
		<div id="map-users-top">
		    <div id="map-users-top-container">
		      <div class="map-users-top-tile">
			<div class="centerIcon">
				<img src="/assets/infographic/iconOmino.png" height="55"/>
			</div>
			<div class="centerTileDetail">
				<span id="usersNum"></span> users
			</div>
		      </div>
		       <div class="map-users-top-tile">
			    <div class="leftBar">
				<div class="map-users-top-percentage-container">				    
				    <div class="map-users-top-percentage-container-complementar"></div> 
				    <div id="community"></div> 
				</div> 
				<img src="/assets/infographic/iconMedal1.png" style="height:40px"/>
			    </div>
			    <div class="usersType">
				    <span id="communityNum"></span><br>community users
			    </div>
		      </div>
		      <div class="map-users-top-tile">
			    <div class="leftBar">
				<div class="map-users-top-percentage-container">				    
				    <div class="map-users-top-percentage-container-complementar"></div> 
				    <div id="trial"></div> 
				</div> 
				<img src="/assets/infographic/iconMedal2.png" style="height:40px"/>
			    </div>
			    <div class="usersType">
				    <span id="trialNum"></span><br>trial users
			    </div>
		      </div>
		      <div class="map-users-top-tile">
			    <div class="leftBar">
				<div class="map-users-top-percentage-container">				    
				    <div class="map-users-top-percentage-container-complementar"></div> 
				    <div id="basic"></div> 
				</div> 
				<img src="/assets/infographic/iconMedal3.png" style="height:40px"/>
			    </div>
			    <div class="usersType">
				    <span id="basicNum"></span><br>basic users
			    </div>
		      </div>		     
		    </div>
		</div>
		<div class="map-container" style="margin-top:0px;">
		  <div id="world-map-nodes"></div>
		  <div id="loadingMap" class="aftermap">Loading <span class="regionsNum"></span> Nodes...</div>
		</div>
		
		<div id="mini-tiles">
		  <!--<div class="tile selected" id="users" onclick="loadMap(this.id);">
		      <div class="tileListContainer">
			  <div class="tileList"><span id="usersNum"></span> users</div>
			  <div class="tileSubList"><span id="basicNum"></span> Basic Users</div>
			  <div class="tileSubList"><span id="trialNum"></span> Trial Users</div>
			  <div class="tileSubList"><span id="communityNum"></span> Community Users</div>
		      </div>
		  </div>
		  <div class="tile selected" id="users1" onclick="loadMap(this.id);">
		      <div class="tileListContainer">	
			  <div class="tileList"><span class="regionsNum"></span> regions</div>
			  <div class="tileList"><span id="orgsNum"></span> orgs.</div>
			  <div class="tileList"><span id="parternCount"></span> insts.</div>
		      </div>
		  </div>-->
		  <div class="tile selected" id="users" onclick="loadMap(this.id);">
		      <div class="centerIcon">
			      <img src="/assets/infographic/iconMap.png" height="55"/>
		      </div>
		      <div class="centerTileDetail">
			      <span class="regionsNum"></span> regions
		      </div>
		      <div class="clear"></div>
		  </div>
		  <div class="tile" id="cpu" onclick="loadMap(this.id);">
		      <div class="centerIcon">
			      <img src="/assets/infographic/iconCpu.png" height="55"/>
		      </div>
		      <div class="centerTileDetail">
			      <span id="coresNum"></span> cores
		      </div>
		      <div class="clear"></div>
		  </div>
		  <div class="tile" id="ram" onclick="loadMap(this.id);">
		      <div class="centerIcon">
			      <img src="/assets/infographic/iconRam.png" height="55"/>
		      </div>
		      <div class="centerTileDetail">
			      <span id="ramNum"></span> GB
		      </div>
		      <div class="clear"></div>
		  </div>
		  <div class="tile" id="hd" onclick="loadMap(this.id);">
		      <div class="centerIcon">
			      <img src="/assets/infographic/iconDisk.png" height="55"/>
		      </div>
		      <div class="centerTileDetail">
			      <span id="hdNum"></span> TB
		      </div>
		      <div class="clear"></div>
		  </div>
		  <div class="tile" id="ip" onclick="loadMap(this.id);">
		      <div class="centerIcon">
			      <img src="/assets/infographic/iconNetwork.png" height="55"/>
		      </div>
		      <div class="centerTileDetail">
			      <span id="ipNum"></span> public IPs
		      </div>
		      <div class="clear"></div>
		  </div>
		  <div class="tile" id="vm" onclick="loadMap(this.id);">
		      <div class="centerIcon">
			      <img src="/assets/infographic/iconVM.png" height="55"/>
		      </div>
		      <div class="centerTileDetail">
			      <span id="vmNum"></span> VM
		      </div>
		      <div class="clear"></div>
		  </div>
		  <div class="clear"></div>
		</div>
	    </div>
	</div>
	<div class="row-fluid">
	    <div class="span12">	
		
		  <section class="media-1">
		    <h3 class="media-heading">
		      FIWARE Lab Capacity is supported by <span id="parternCount"></span> institutions
		    </h3>
		    <div class="parternList">
			    Loading...
			    <!--<img src="/assets/infographic/loghi/acreo.jpg"/>
			    <img src="/assets/infographic/loghi/atos.jpg"/>
			    <img src="/assets/infographic/loghi/cesnet.png"/>
			    <img src="/assets/infographic/loghi/createnet.gif"/>
			    <img src="/assets/infographic/loghi/eng.png"/>
			    <img src="/assets/infographic/loghi/eurescom.jpg"/>
			    <img src="/assets/infographic/loghi/gowex.jpg"/>
			    <img src="/assets/infographic/loghi/orange.jpg"/>
			    <img src="/assets/infographic/loghi/telecom.jpg"/>
			    <img src="/assets/infographic/loghi/telefonica.jpg"/>
			    <img src="/assets/infographic/loghi/thales.gif"/>
			    <img src="/assets/infographic/loghi/tn.png"/>-->
		    </div>
		  </section>
		  
		 <!-- <div class="section">
			<div class="headerSection accordionTitle ">
				<div class="leftIcon">
					<img src="/assets/infographic/iconInstitution.png" height="55"/>
					
				</div>
				<div class="partnerType">
					FIWARE Lab Capacity is supported by:
				</div>
				
				<div class="clear"></div>
			</div>
			<div class="bodySection accordionPanel bigPanel leaveOpen" id="parternList">
				<div class="parternList">
					Loading...
					
				</div>
			</div>
		
			
		</div>	-->		
	    </div>
	</div>
	
</div>
        

<!--

<section class="partners">
	<div class="section">
		<div class="headerSection accordionTitle">
			<div class="leftIcon">
				<div class="partnerType">
					<h3>Institutional</h3>
				</div>
			</div>
			<div class="rightDetail">
				<span class="badge">14</span>
			</div>
			<div class="clear"></div>
		</div>
		<div class="bodySection accordionPanel bigPanel">
			<div class="parternList">
			</div>
		</div>
		
	</div>
 
	<div class="section">
		<div class="headerSection accordionTitle">
			<div class="leftIcon">
				<div class="partnerType">
					<h3>Gold</h3>
				</div>
			</div>
			<div class="rightDetail">
				<span class="badge">10</span>
			</div>
			<div class="clear"></div>
		</div>
		<div class="bodySection accordionPanel bigPanel">
			<div class="parternList">
			</div>
		</div>		
	</div>
	
	<div class="section">
		<div class="headerSection accordionTitle">
			<div class="leftIcon">
				<div class="partnerType">
					<h3>Silver</h3>
				</div>
			</div>
			<div class="rightDetail">
				<span class="badge">10</span>
			</div>
			<div class="clear"></div>
		</div>
		<div class="bodySection accordionPanel bigPanel">
			<div class="parternList">
			</div>
		</div>		
	</div>
	
	<div class="section">
		<div class="headerSection accordionTitle">
			<div class="leftIcon">
				<div class="partnerType">
					<h3>Bronze</h3>
				</div>
			</div>
			<div class="rightDetail">
				<span class="badge">10</span>
			</div>
			<div class="clear"></div>
		</div>
		<div class="bodySection accordionPanel bigPanel">
			<div class="parternList">
			</div>
		</div>		
	</div>
</section>
<div class="clear"></div>-->

<% content_for :jsfooter do %>
  <!-- #################################################################################### -->

  <!-- ===== init ===== -->
  <script type="text/javascript">

//          $(window).resize(function(){
//            location.reload();
//          });
	  var semaforo = 0;
	  var map;
	  var selectedMarkers = [];
	  var selectedRegions = [];
	  var selectedRegionsCpu = [];
	  var selectedMarkersCpu = [];
	  var selectedRegionsRam = [];
	  var selectedMarkersRam = [];
	  var selectedRegionsDisk = [];
	  var selectedMarkersDisk = [];
	  var selectedRegionsVm = [];
	  var selectedMarkersVm = [];
	  var selectedRegionsIp = [];
	  var selectedMarkersIp = [];
	  var tileSelected = "users";
				
	   function loadMap(divId) {
		$('.tile').removeClass('selected');
		$('.tileRight').removeClass('selected');
		
		if(divId == "users" || divId == "users1")
		{
		    $('#users').addClass('selected');
		    $('#users1').addClass('selected');
		}
		else
		  $('#'+divId).addClass('selected');
		
		tileSelected = divId;
		
		switch (divId) {
		    case "users": 
		    case "users1": 
		    {
		      if(selectedMarkers!=[] && selectedRegions!=[])
		      {
			  map.clearSelectedRegions();
			  map.setSelectedRegions(selectedRegions);
				
			  map.removeAllMarkers();
			  map.addMarkers(selectedMarkers);
		      }
		      break;
		    }
		    case "cpu": 
		    {
		      if(selectedMarkersCpu!=[] && selectedRegionsCpu!=[])
		      {
			  var array_values_cpu = new Array();
			  for (var key in selectedRegionsCpu) {
			    array_values_cpu.push(parseInt(selectedRegionsCpu[key]));
			  }
			
			  map.clearSelectedRegions();
			  map.series.regions[0].clear();		     
			  var max_of_cpu = Math.max.apply(Math, array_values_cpu);
			  var min_of_cpu = Math.min.apply(Math, array_values_cpu);
			  map.series.regions[0].scale['minValue'] = min_of_cpu;
			  map.series.regions[0].scale['maxValue'] = max_of_cpu;
			  map.series.regions[0].setValues(selectedRegionsCpu); 
				
			  map.removeAllMarkers();
			  map.addMarkers(selectedMarkersCpu);
		      }
		      break;
		    }
		    case "hd": 
		    {
		      if(selectedMarkersDisk!=[] && selectedRegionsDisk!=[])
		      {
			  var array_values_disk = new Array();
			  for (var key in selectedRegionsDisk) {
			    array_values_disk.push(parseInt(selectedRegionsDisk[key]));
			  }
			  
			  map.clearSelectedRegions();
			  map.series.regions[0].clear();
			  var max_of_disk = Math.max.apply(Math, array_values_disk);
			  var min_of_disk = Math.min.apply(Math, array_values_disk);
			  map.series.regions[0].scale['minValue'] = min_of_disk;
			  map.series.regions[0].scale['maxValue'] = max_of_disk;
			  map.series.regions[0].setValues(selectedRegionsDisk);
			  
			  map.removeAllMarkers();
			  map.addMarkers(selectedMarkersDisk);
		      }
		      break;
		    }
		    case "ram": 
		    {
		      if(selectedMarkersRam!=[] && selectedRegionsRam!=[])
		      {
			  var array_values_ram = new Array();
			  for (var key in selectedRegionsRam) {
			    array_values_ram.push(parseInt(selectedRegionsRam[key]));
			  }
			  
			  map.clearSelectedRegions();
			  map.series.regions[0].clear();
			  var max_of_ram = Math.max.apply(Math, array_values_ram);
			  var min_of_ram = Math.min.apply(Math, array_values_ram);
			  map.series.regions[0].scale['minValue'] = min_of_ram;
			  map.series.regions[0].scale['maxValue'] = max_of_ram;
			  map.series.regions[0].setValues(selectedRegionsRam);
			  
			  map.removeAllMarkers();
			  map.addMarkers(selectedMarkersRam);
		      }
		      break;
		    }
		    case "ip": 
		    {
		      if(selectedMarkersIp!=[] && selectedRegionsIp!=[])
		      {
			  var array_values_ip = new Array();
			  for (var key in selectedRegionsIp) {
			    array_values_ip.push(parseInt(selectedRegionsIp[key]));
			  }

			  map.clearSelectedRegions();
			  map.series.regions[0].clear();
			  var max_of_ip = Math.max.apply(Math, array_values_ip);
			  var min_of_ip = Math.min.apply(Math, array_values_ip);
			  map.series.regions[0].scale['minValue'] = min_of_ip;
			  map.series.regions[0].scale['maxValue'] = max_of_ip;
			  map.series.regions[0].setValues(selectedRegionsIp);
			  
			  map.removeAllMarkers();
			  map.addMarkers(selectedMarkersIp);
		      }
		      break;
		    }
		    case "vm": 
		    {
		      if(selectedMarkersVm!=[] && selectedRegionsVm!=[])
		      {
			  var array_values_vm = new Array();
			  for (var key in selectedRegionsVm) {
			    array_values_vm.push(parseInt(selectedRegionsVm[key]));
			  }
			  
			  map.clearSelectedRegions();
			  map.series.regions[0].clear();
			  var max_of_vm = Math.max.apply(Math, array_values_vm);
			  var min_of_vm = Math.min.apply(Math, array_values_vm);
			  map.series.regions[0].scale['minValue'] = min_of_vm;
			  map.series.regions[0].scale['maxValue'] = max_of_vm;
			  map.series.regions[0].setValues(selectedRegionsVm);
			  map.removeAllMarkers();
			  map.addMarkers(selectedMarkersVm);
		      }
		      break;
		    }
		    default:     break;
		}
	    };
	  
	  $(document).ready(function() 
	  {
		  $('.status').removeClass('active');
		  $('.infographic').addClass('active');
		  
		  
		  $('#world-map-nodes').css('width',Math.round($('.span12').width()));
		  $('#world-map-nodes').css('height',Math.round($('.span12').width()*300/545));

		  /** =================================================================
		  *  Map
		  **/
		  map = new jvm.WorldMap({
  // 		var map = $('#world-map').vectorMap({
		  container: $('#world-map-nodes'),
		  map: 'world_mill_en',
		  backgroundColor: 'white',
		  zoomOnScroll: false,

		  regionStyle: {
			initial: {
			  fill: '#999999',
			  "fill-opacity": 1,
			  stroke: 'none',
			  "stroke-width": 0,
			  "stroke-opacity": 1
			},
			hover: {
			  "fill-opacity": 0.8
			},
			selected: {
			      fill: '#002d67'
			},
			selectedHover: {
			}
		  },
		  onMarkerClick: function(events, index) {
		      window.location.href = '<%= root_url(subdomain: "status.lab")%>'+"node/"+selectedMarkers[index].id;	    
		  },
		  markerStyle: {
			initial: {
			  fill: '#ff9900',
			  stroke: '#383f47'
			},
			noUp: {
			  fill: '#ffffff',
			  stroke: '#000000'
			}

		  },
		  series: {
			    regions: [{
					    scale: ['#c8e0ff', '#002d67'],
					    normalizeFunction: 'linear'
			    }]
		  },
		  onRegionClick: function(event, code) {
 
		     $('#world-map-nodes').vectorMap('set', 'focus', code);
		      
		      
		  },
		  onMarkerLabelShow: function(event, label, code) {
		      label.html(label.html().replace(/\n/g,"<br>"));                
		  }

		  });

		  $('#world-map-nodes').vectorMap('set', 'focus', 1.7, 0.4, 0.5);
		  
		  $('#world-map-nodes').css('width',"100%");

		 /* var mapCpu = new jvm.WorldMap({
  // 		$('#world-map-cpu').vectorMap({
		  container: $('#world-map-cpu'),
		  map: 'world_mill_en',
		  regionStyle: {
			    initial: {
			      fill: '#ffffff',
			      "fill-opacity": 1,
			      stroke: 'none',
			      "stroke-width": 0,
			      "stroke-opacity": 1
			    },
			    hover: {
			      "fill-opacity": 0.8
			    },
			    selected: {
				  fill: 'orange'
			    },
			    selectedHover: {
			    }
		  },
		  markerStyle: {
			initial: {
			  fill: '#ff9900',
			  stroke: '#383f47'
			}
		  },
		  onMarkerClick: function(events, index) {
		      window.location.href = '<%= root_url(subdomain: "status.lab")%>'+"node/"+selectedMarkers[index].id;	    
		  },
		  series: {
			    regions: [{
			  // attribute:'fill',
					scale: ['#C8EEFF', '#0071A4'],
  // 					      scale: {
  // 							  84: '#4169E1',
  // 							  64: '#FF69B4'
  // 							},
					normalizeFunction: 'linear'
			    }]
		  }			     

		  });

		  $('#world-map-cpu').vectorMap('set', 'focus', 4.3, 0.5, 0.3);

		  var mapRam = new jvm.WorldMap({
  // 		$('#world-map-ram').vectorMap({
		  container: $('#world-map-ram'),
		  map: 'world_mill_en',
		  regionStyle: {
			    initial: {
			      fill: '#ffffff',
			      "fill-opacity": 1,
			      stroke: 'none',
			      "stroke-width": 0,
			      "stroke-opacity": 1
			    },
			    hover: {
			      "fill-opacity": 0.8
			    },
			    selected: {
				  fill: 'orange'
			    },
			    selectedHover: {
			    }
		  },
		  markerStyle: {
			initial: {
			  fill: '#ff9900',
			  stroke: '#383f47'
			}
		  },
		  onMarkerClick: function(events, index) {
		      window.location.href = '<%= root_url(subdomain: "status.lab")%>'+"node/"+selectedMarkers[index].id;	    
		  },
		  series: {
			    regions: [{
					    scale: ['#C8EEFF', '#0071A4'],
					    normalizeFunction: 'linear'
			    }]
		  }

		  });

		  $('#world-map-ram').vectorMap('set', 'focus', 4.3, 0.5, 0.3);

		  var mapDisk = new jvm.WorldMap({
  // 		$('#world-map-disk').vectorMap({
		  container: $('#world-map-disk'),
		  map: 'world_mill_en',
		  regionStyle: {
			    initial: {
			      fill: '#ffffff',
			      "fill-opacity": 1,
			      stroke: 'none',
			      "stroke-width": 0,
			      "stroke-opacity": 1
			    },
			    hover: {
			      "fill-opacity": 0.8
			    },
			    selected: {
				  fill: 'orange'
			    },
			    selectedHover: {
			    }
		  },
		  markerStyle: {
		    initial: {
		      fill: '#ff9900',
		      stroke: '#383f47'
		    }
		  },
		  onMarkerClick: function(events, index) {
		      window.location.href = '<%= root_url(subdomain: "status.lab")%>'+"node/"+selectedMarkers[index].id;	    
		  },
		  series: {
			    regions: [{
					    scale: ['#C8EEFF', '#0071A4'],
					    normalizeFunction: 'linear'
			    }]
		  }

		  });

		  $('#world-map-disk').vectorMap('set', 'focus', 4.3, 0.5, 0.3);


                var mapIp = new jvm.WorldMap({
  //            $('#world-map-ip').vectorMap({
                  container: $('#world-map-ip'),
                  map: 'world_mill_en',
                  regionStyle: {
                            initial: {
                              fill: '#ffffff',
                              "fill-opacity": 1,
                              stroke: 'none',
                              "stroke-width": 0,
                              "stroke-opacity": 1
                            },
                            hover: {
                              "fill-opacity": 0.8
                            },
                            selected: {
                                  fill: 'orange'
                            },
                            selectedHover: {
                            }
                  },
                  markerStyle: {
                    initial: {
                      fill: '#ff9900',
                      stroke: '#383f47'
                    }
                  },
                  onMarkerClick: function(events, index) {
		      window.location.href = '<%= root_url(subdomain: "status.lab")%>'+"node/"+selectedMarkers[index].id;	    
		  },
                  series: {
                            regions: [{
                                            scale: ['#C8EEFF', '#0071A4'],
                                            normalizeFunction: 'linear'
                            }]
                  }

                  });

                  $('#world-map-ip').vectorMap('set', 'focus', 4.3, 0.5, 0.3);



		  var mapVm = new jvm.WorldMap({
  // 		$('#world-map-vm').vectorMap({
		  container: $('#world-map-vm'),
		  map: 'world_mill_en',
		  regionStyle: {
			    initial: {
			      fill: '#ffffff',
			      "fill-opacity": 1,
			      stroke: 'none',
			      "stroke-width": 0,
			      "stroke-opacity": 1
			    },
			    hover: {
			      "fill-opacity": 0.8
			    },
			    selected: {
				  fill: 'orange'
			    },
			    selectedHover: {
			    }
		  },
		  markerStyle: {
			initial: {
			  fill: '#ff9900',
			  stroke: '#383f47'
			}
		  },
		  onMarkerClick: function(events, index) {
		      window.location.href = '<%= root_url(subdomain: "status.lab")%>'+"node/"+selectedMarkers[index].id;	    
		  },
		  series: {
			    regions: [{
					    scale: ['#C8EEFF', '#0071A4'],
					    normalizeFunction: 'linear'
			    }]
		  }

		  });

		  $('#world-map-vm').vectorMap('set', 'focus', 4.3, 0.5, 0.3);	*/	 
		  
		  function ajaxInstitutionsFun() { 
		      $.ajax (
				{
				      type: "POST",
				      url: "../../api/v1/institution",//to get institutions
				      contentType: "application/json; charset=utf-8",
				      data: {},
				      dataType: "json",
				      cache: false,
				      success: function(json){
					  
					var institutionsData = json;
					  
					if(institutionsData != null && institutionsData != "undefined" )
					{
					  $(".parternList").html("");
					  
					  var parternCount = institutionsData.length;
					  $("#parternCount").html(parternCount);//("<span class=\"badge\">"+parternCount+"</span>");
    // 				      var parternRows = Math.ceil(parternCount/3);
    // 				      var heightPanel = parternRows*130;
					  
					  
					  
					  $.each(institutionsData, function( index, institution ){
					  
					    if(institution["link"]!= null && institution["link"] != "undefined")
					      $(".parternList").append("<a href=\""+institution["link"]+"\" target=\"_blank\"><img alt=\""+institution["name"]+"\" title=\""+institution["name"]+"\" src=\"/assets/infographic/loghi/"+institution["logo"]+"\"/></a>");
					    else
					      $(".parternList").append("<img alt=\""+institution["name"]+"\" title=\""+institution["name"]+"\" src=\"/assets/infographic/loghi/"+institution["logo"]+"\"/>");
					    
    // 					$('#parternList').css('height',$(".parternList").height()+10);
					    });  
					    
					    if(parternCount==0) $(".parternList").html("No institutions found");
					  
					}
    // 				    $("#imgHistoryMessages").hide();  
				      },
				      error: function(xhr, textStatus, errorThrown){
					var errore = "<%= FiLabInfographics.nodata %>";
					if(xhr.responseText != null && xhr.responseText != "" && xhr.responseText != "null")
						errore = xhr.responseText;
	      // 				      $('#tableHeaderContent').html("<DIV CLASS='field field-header'>"+errore+"</DIV>");
					$(".parternList").html(errore);
	      //     				alert('request failed->'+textStatus);
	  //         				console.log(xhr.status + ' çççç'+xhr.body+'òòòò' + textStatus + ' ' + errorThrown);
    // 				    $("#imgHistoryMessages").hide();
				      } 
			    }
		      );
		  };
		  
		  function ajaxFun() { 		
		    if(semaforo > 0) 
		    {
		      return;
		    }
		    semaforo = 1;
		 
		    $.ajax (
				{
				      type: "GET",
				      url: "../api/v1/region/totData",//to know how many regions
				      contentType: "application/json; charset=utf-8",
				      data: {},
				      dataType: "json",
				      cache: false,
				      success: function(json){
				      
					var totData = json;
					if(totData == null || totData == "undefined") return;
					
					$( "#infographics" ).show();
					$( "#error" ).hide();
					
					var nBasicUsers = parseInt(totData['basicUsers']);
					var nTrialUsers = parseInt(totData['trialUsers']);
					var nCommunityUsers = parseInt(totData['communityUsers']);
					var nUsers = nBasicUsers + nTrialUsers + nCommunityUsers;
	// 				var nUsers = parseInt(totData['total_nb_users']);
					if (nUsers == 0)
					  nUsers = 2026 
					var nOrganizations = parseInt(totData['totalUserOrganizations']);
					if (nOrganizations == 0)
					  nOrganizations = 549
					var nCores = parseInt(totData['total_nb_cores']);
					var nRam = Math.round(parseInt(totData['total_nb_ram'])/1024); 
					var nHd = Math.round(parseInt(totData['total_nb_disk'])/1024);
					var nVm = parseInt(totData['total_nb_vm']);
					var nRegions = parseInt(totData['total_regions_count']);
					var nIp = parseInt(totData['total_ip']);
					
					$('#usersNum').html(nUsers);
				    
					$('#basicNum').html(nBasicUsers); 
					$('#trialNum').html(nTrialUsers);  
					$('#communityNum').html(nCommunityUsers);  
					
					
					var heightOfContainer = 100;
// 					alert(heightOfContainer);
					var communityHeight = Math.round(heightOfContainer*nCommunityUsers/nUsers);
					var trialHeight = Math.round(heightOfContainer*nTrialUsers/nUsers);
					var basicHeight = heightOfContainer-communityHeight-trialHeight;
					
					$("#community").animate({height:communityHeight+"%"}, 500);
					$("#trial").animate({height:trialHeight+"%"}, 500);
					$("#basic").animate({height:basicHeight+"%"}, 500);
					
// 					$('#community').css('width',communityWidth+"%");
// 					$('#trial').css('width',trialWidth+"%");
// 					$('#basic').css('width',basicWidth+"%");
					
// 					alert($('#community').width()+"-community--"+widthOfContainer*nCommunityUsers/nUsers);
// 					alert($('#trial').width()+"-trial--"+widthOfContainer*nTrialUsers/nUsers);
// 					alert($('#basic').width()+"-basic--"+widthOfContainer*nBasicUsers/nUsers);
// 					alert(widthOfContainer*nCommunityUsers/nUsers+widthOfContainer*nTrialUsers/nUsers+widthOfContainer*nBasicUsers/nUsers);
					
					$('#orgsNum').html(nOrganizations);
					$('.regionsNum').html(nRegions);
					$('#coresNum').html(nCores);
					$('#ramNum').html(nRam);
					$('#hdNum').html(nHd);
					$('#vmNum').html(nVm);
					$('#ipNum').html(nIp);
					
					$.ajax (
					{
					  type: "GET",
					  url: "../api/v1/region",
					  contentType: "application/json; charset=utf-8",
					  data: {},
					  dataType: "json",
					  cache: false,
					  success: function(json){

					    semaforo = 0;
					    $('#loadingMap').removeClass();
					    $('#loadingMap').addClass('aftermaphide');
					    selectedMarkers = [];
					    selectedRegions = [];
					    selectedRegionsCpu = [];
					    selectedMarkersCpu = [];
					    selectedRegionsRam = [];
					    selectedMarkersRam = [];
					    selectedRegionsDisk = [];
					    selectedMarkersDisk = [];
					    selectedRegionsVm = [];
					    selectedMarkersVm = [];
					    selectedRegionsIp = [];
					    selectedMarkersIp = [];				
					    
					    
					    var actualTime = Math.floor(Date.now() / 1000)
					    var deltaTime = 10800;
					    $.each(json['regions'], function(key, val) {
	      // 				nUsers += parseInt(this['nUser']);
	      // 				nCores += parseInt(this['coreTot']);
	      // 				nRam += parseInt(this['ramTot']);
	      // 				nHd += parseInt(this['hdTot']);
	      // 				nVm += parseInt(this['vmTot']);
	      // 				nRegions += 1;

	      // 				selectedRegions = selectedRegions + '\'' + key  + '\'';
					      selectedRegions.push(this['country']);
					      if (selectedRegionsCpu[this['country']] == null)
						selectedRegionsCpu[this['country']] = parseInt(this['nb_cores']);
					      else 
						selectedRegionsCpu[this['country']] += parseInt(this['nb_cores']);
					      if (selectedRegionsRam[this['country']] == null)
						selectedRegionsRam[this['country']] = parseInt(this['nb_ram'])/1024;
					      else
						selectedRegionsRam[this['country']] += parseInt(this['nb_ram'])/1024;
					      if (selectedRegionsDisk[this['country']] == null)
						selectedRegionsDisk[this['country']] = parseInt(this['nb_disk'])/1024;
					      else
						selectedRegionsDisk[this['country']] += parseInt(this['nb_disk'])/1024;
					      if (selectedRegionsVm[this['country']] == null)
						selectedRegionsVm[this['country']] = parseInt(this['nb_vm']);
					      else
						selectedRegionsVm[this['country']] += parseInt(this['nb_vm']);
					      if (selectedRegionsIp[this['country']] == null)
						selectedRegionsIp[this['country']] = parseInt(this['ipTot']);
					      else 
						selectedRegionsIp[this['country']] += parseInt(this['ipTot']);

					      if(this['latitude'] != "" && this['longitude'] != "")
					      {
						  var marker = {};
						  marker["id"] = this['id'];
						  marker["latLng"] = [];
						  marker["latLng"] = [parseFloat(this['latitude']),parseFloat(this['longitude'])];
						  marker["name"] = this['name'];
						  //console.log(this['timestamp']);
						  regionTime =( new Date(this['timestamp']).getTime() / 1000)
						  my_time=new Date(this['timestamp'])
						  
						  month=my_time.getMonth()+1;if (month<10)month="0"+month;
						  day=my_time.getDate();if (day<10)day="0"+day;
						  hours=my_time.getUTCHours();if (hours<10)hours="0"+hours;
						  mins=my_time.getUTCMinutes();if (mins<10)mins="0"+mins;
						  the_time=my_time.getFullYear() + "-" + month + "-" + day + "  " + hours + ":" + mins;
									  
	    //                                       if (this['name']=="Gent"){
	    //                                         console.log(this['timestamp'])
	    //                                         console.log(my_time.getMonth());                                       
	    //                                         console.log(the_time);
	    //                                       }

						  if (actualTime>(regionTime+deltaTime)) {
						    marker["style"]={fill: '#868F98',stroke: '#383f47'};                                        
						    marker["name"] = this['name']+": Last Update on "+the_time;
						  }
						  else{
						    marker["name"] = this['name']+
						    "\nCores: "+parseInt(this['nb_cores'])+
						    ", \nRAM: "+(parseInt(this['nb_ram'])/1024).toFixed(1)+" GB"+
						    ", \nDisk: "+(parseInt(this['nb_disk'])/1024).toFixed(1) +" TB"+
						    ", \nIPs: "+parseInt(this['ipTot'])+
						    ", \nVMs: "+parseInt(this['nb_vm']);
						  }
						  //marker["name"] = this['name'];
						  selectedMarkers.push(marker);
						  
						  var markerCpu = {};
						  freeCpu =  (parseInt(this['nb_cores'])*parseFloat(this['cpu_allocation_ratio'])-parseInt(this['nb_cores_used']));
						  if (freeCpu<0)
						    freeCpu = 0;
						  markerCpu["latLng"] = [];
						  markerCpu["latLng"] = [parseFloat(this['latitude']),parseFloat(this['longitude'])];

						  if (actualTime>(regionTime+deltaTime)) {
						    markerCpu["style"]={fill: '#868F98',stroke: '#383f47'};
						    markerCpu["name"] = this['name']+": Last Update on "+the_time;
						  }
						  else{
						    markerCpu["name"] = this['name'] + " (" + freeCpu + " available virtual cores / " + parseInt(this['nb_cores'])*parseFloat(this['cpu_allocation_ratio']) + " total virtual cores / "+parseInt(this['nb_cores']) + " total physical cores)";
						  }
						  selectedMarkersCpu.push(markerCpu);

						  var markerRam = {};
						  freeRam = ((1-parseFloat(this['percRAMUsed']))*(parseInt(this['nb_ram']*parseFloat(this['ram_allocation_ratio']))/1024)).toFixed(1);
						  if (freeRam<0)
						    freeRam = 0;
						  markerRam["latLng"] = [];
						  markerRam["latLng"] = [parseFloat(this['latitude']),parseFloat(this['longitude'])];

						  if (actualTime>(regionTime+deltaTime)) {
						    markerRam["style"]={fill: '#868F98',stroke: '#383f47'};
						    markerRam["name"] = this['name']+": Last Update on "+the_time;
						  }
						  else{
						    markerRam["name"] = this['name'] + " (" + freeRam + " available GB virtual RAM  / " + (parseInt(this['nb_ram']*parseFloat(this['ram_allocation_ratio']))/1024).toFixed(1) +" total GB virtual RAM / " + (parseInt(this['nb_ram'])/1024).toFixed(1) + " total GB physical RAM)";
						  }
						  selectedMarkersRam.push(markerRam);

						  var markerDisk = {};
						  freeDisk = ((1-parseFloat(this['percDiskUsed']))*(parseInt(this['nb_disk'])/1024)).toFixed(1);
						  if (freeDisk<0)
						    freeDisk = 0;
						  markerDisk["latLng"] = [];
						  markerDisk["latLng"] = [parseFloat(this['latitude']),parseFloat(this['longitude'])];

						  if (actualTime>(regionTime+deltaTime)) {
						    markerDisk["style"]={fill: '#868F98',stroke: '#383f47'};
						    markerDisk["name"] = this['name']+": Last Update on "+the_time;
						  }
						  else{
						    markerDisk["name"] = this['name'] + " (Available " + freeDisk + " / " + (parseInt(this['nb_disk'])/1024).toFixed(1) +"  TB)";
						  }
						  selectedMarkersDisk.push(markerDisk);

						  var markerIp = {};
						  markerIp["latLng"] = [];
						  markerIp["latLng"] = [parseFloat(this['latitude']),parseFloat(this['longitude'])];
						  if (actualTime>(regionTime+deltaTime)) {
						    markerIp["style"]={fill: '#868F98',stroke: '#383f47'};
						    markerIp["name"] = this['name']+": Last Update on "+the_time;
						  }
						  else{
						    markerIp["name"] = this['name'] + " (" + (parseInt(this['ipTot'])-parseInt(this['ipAllocated'])) + " available Public IPs / " + parseInt(this['ipTot']) + " total Public IPs)";
						  }
						  selectedMarkersIp.push(markerIp);

						  var markerVm = {};
						  markerVm["latLng"] = [];
						  markerVm["latLng"] = [parseFloat(this['latitude']),parseFloat(this['longitude'])];
						  if (actualTime>(regionTime+deltaTime)) {
						    markerVm["style"]={fill: '#868F98',stroke: '#383f47'};
						    markerVm["name"] = this['name']+": Last Update on "+the_time; 
						  }
						  else{
						    markerVm["name"] = this['name'] + " (" + this['nb_vm'] + " vm)";
						  }
						  selectedMarkersVm.push(markerVm);
					      }


					    });


					    loadMap(tileSelected);

					  },
					  error: function(xhr, textStatus, errorThrown){

					      semaforo = 0;
					      $( "#infographics" ).hide();
					      $( "#error" ).show();

					      var errore = "<%= FiLabInfographics.nodata %>";
					      if(xhr.responseText != null && xhr.responseText != "" && xhr.responseText != "null")
						      errore = xhr.responseText;
					      $('#errorMessage').html(errore);
					      } 
				      }
			      );
			    },
			    error: function(xhr, textStatus, errorThrown){

				semaforo = 0;
				$( "#infographics" ).hide();
				$( "#error" ).show();

				var errore = "<%= FiLabInfographics.nodata %>";
				if(xhr.responseText != null && xhr.responseText != "" && xhr.responseText != "null")
					errore = xhr.responseText;
				$('#errorMessage').html(errore);
				} 
			  }
		  );	
				    
		 		  
		  
		  }



		  /** ================================================================= 
		  *	Accordion Effect
		  */
		  $('.accordionPanel').not('.leaveOpen').hide();
		  $('.accordionTitle').click( function()
		  {
			  var $this = $(this);
			  $this.next('.accordionPanel').slideToggle(function()
			  {
				  if( $this.hasClass('closeme' ) )
				  {
					  $this.removeClass('closeme' );
					  $this.addClass('openme' );
				  }
				  else
				  {
					  $this.removeClass('openme' );
					  $this.addClass('closeme' );
				  }
			  });
		  });
		  $('.accordionTitle').hover( 
			  function()
			  {
				  $(this).addClass('hovered');
			  },
			  function()
			  {
				  $(this).removeClass('hovered');
			  }
		  );

		  /** ================================================================= **/
		  //Chiamo il mio ajax la prima volta
		  ajaxInstitutionsFun();//load only first time
		  ajaxFun();
		  //e poi lo richiamo dopo 1 minuto
		  setInterval(function(){ajaxFun()}, 60000);
      
	  });
  </script>
<% end %>
